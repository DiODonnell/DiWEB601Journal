This week we have been exploring some basic javascript and looked at operators and how
they work in javascript. We created a repo for our javascript practice looked at the difference between a
 VAR (now outdated) a LET (allows new input to override original set variable) and CONST which is like
  a constant or static variable that cannot be overwritten later so one declaration for a name cannot
   be used with another value for the same name.

We practiced the basic math operators with the return written to the console. Basically they are the
 same operators I've used previously with the same order * multiply, then / divide, then + add
  and then - minus. The use of parentheses means that lower order operators can be carried out
   before the higher order operators.

   Giving a flash talk came at the end of class - you get up and speak as a team on a topic for5 minutes.
   It was okay as talking in a group is less frightening than speaking individually in front of class.

   Today we continued with javascript and looked at logic and how it is carried out in javascript.
   It was really interesting and is like a true or a false as in a boolean. If this is the state what 
   does the javescript do? we looked at writing up a table to get all the possibilities - something
   I did in application testing and had forgotten what we called the table. New operators to remember
   but the AND && and the OR || behave very much the same as in SQL procedures. The ! is new as is
    absolute equals ===. My algebra although many years ago is helping me through functions and how
    to write a function that will carry out one mathematical one equation before carrying out the others and 
    how that will affect the result.

    We looked at how javascript behaves under the hood. This was extremely useful to learn. Line by Line
    synchronous is the usual behaviour. Functions don't get carried out until they are called when they carry
    out the operation in a local context which sends the result to the global context where all variable 
    declarations are held in a constant state. The return from the function is then held in the 
    global context and the local context disappears in some way once the function has finished it's job!
    This will be invaluable knowing when we go to write code and can better understand what is happening
    when it runs. We looked at the call stack and how that operates and will learn about asynchronous later
    which prevents the call stack clogging up and slowing down the app. Lots to do so will be a busy weekend!
